
package shoshin.alex.tutusoap.services;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.datatype.XMLGregorianCalendar;
import javax.xml.ws.Action;
import javax.xml.ws.FaultAction;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.9-b130926.1035
 * Generated source version: 2.2
 * 
 */
@WebService(name = "Terminal", targetNamespace = "http://services.tutusoap.alex.shoshin/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface Terminal {


    /**
     * 
     * @param departureTime
     * @param destinationPoint
     * @param patronymic
     * @param departurePoint
     * @param surname
     * @param name
     * @param destinationTime
     * @param birthDate
     * @return
     *     returns int
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "reserveTicket", targetNamespace = "http://services.tutusoap.alex.shoshin/", className = "shoshin.alex.tutusoap.services.ReserveTicket")
    @ResponseWrapper(localName = "reserveTicketResponse", targetNamespace = "http://services.tutusoap.alex.shoshin/", className = "shoshin.alex.tutusoap.services.ReserveTicketResponse")
    @Action(input = "http://services.tutusoap.alex.shoshin/Terminal/reserveTicketRequest", output = "http://services.tutusoap.alex.shoshin/Terminal/reserveTicketResponse")
    public int reserveTicket(
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "surname", targetNamespace = "")
        String surname,
        @WebParam(name = "patronymic", targetNamespace = "")
        String patronymic,
        @WebParam(name = "birthDate", targetNamespace = "")
        XMLGregorianCalendar birthDate,
        @WebParam(name = "departurePoint", targetNamespace = "")
        String departurePoint,
        @WebParam(name = "destinationPoint", targetNamespace = "")
        String destinationPoint,
        @WebParam(name = "departureTime", targetNamespace = "")
        XMLGregorianCalendar departureTime,
        @WebParam(name = "destinationTime", targetNamespace = "")
        XMLGregorianCalendar destinationTime);

    /**
     * 
     * @param ticketId
     * @return
     *     returns shoshin.alex.tutusoap.services.Ticket
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getTicket", targetNamespace = "http://services.tutusoap.alex.shoshin/", className = "shoshin.alex.tutusoap.services.GetTicket")
    @ResponseWrapper(localName = "getTicketResponse", targetNamespace = "http://services.tutusoap.alex.shoshin/", className = "shoshin.alex.tutusoap.services.GetTicketResponse")
    @Action(input = "http://services.tutusoap.alex.shoshin/Terminal/getTicketRequest", output = "http://services.tutusoap.alex.shoshin/Terminal/getTicketResponse")
    public Ticket getTicket(
        @WebParam(name = "ticketId", targetNamespace = "")
        int ticketId);

    /**
     * 
     * @param ticketId
     * @throws TicketDoesNotExistException_Exception
     * @throws AlreadyPaidException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "payForTicket", targetNamespace = "http://services.tutusoap.alex.shoshin/", className = "shoshin.alex.tutusoap.services.PayForTicket")
    @ResponseWrapper(localName = "payForTicketResponse", targetNamespace = "http://services.tutusoap.alex.shoshin/", className = "shoshin.alex.tutusoap.services.PayForTicketResponse")
    @Action(input = "http://services.tutusoap.alex.shoshin/Terminal/payForTicketRequest", output = "http://services.tutusoap.alex.shoshin/Terminal/payForTicketResponse", fault = {
        @FaultAction(className = TicketDoesNotExistException_Exception.class, value = "http://services.tutusoap.alex.shoshin/Terminal/payForTicket/Fault/TicketDoesNotExistException"),
        @FaultAction(className = AlreadyPaidException_Exception.class, value = "http://services.tutusoap.alex.shoshin/Terminal/payForTicket/Fault/AlreadyPaidException")
    })
    public void payForTicket(
        @WebParam(name = "ticketId", targetNamespace = "")
        int ticketId)
        throws AlreadyPaidException_Exception, TicketDoesNotExistException_Exception
    ;

    /**
     * 
     * @param ticketId
     */
    @WebMethod
    @RequestWrapper(localName = "returnTicket", targetNamespace = "http://services.tutusoap.alex.shoshin/", className = "shoshin.alex.tutusoap.services.ReturnTicket")
    @ResponseWrapper(localName = "returnTicketResponse", targetNamespace = "http://services.tutusoap.alex.shoshin/", className = "shoshin.alex.tutusoap.services.ReturnTicketResponse")
    @Action(input = "http://services.tutusoap.alex.shoshin/Terminal/returnTicketRequest", output = "http://services.tutusoap.alex.shoshin/Terminal/returnTicketResponse")
    public void returnTicket(
        @WebParam(name = "ticketId", targetNamespace = "")
        int ticketId);

}
